;;;; cl-flexoplan.lisp

(in-package #:cl-flexoplan)

(cl-interpol:enable-interpol-syntax)

(defparameter last-id -1)
(defparameter goals (make-hash-table :test #'equal))

;;; Now we implement simple in-memory storage of these "goals" (know as "tickets" elsewhere).
(defclass goal ()
  ((id :initform (incf last-id) :initarg :id :accessor goal-id)
   (title :initform (error "Title should be specified") :initarg :title :accessor goal-title)
   (description :initform nil :initarg :description :accessor goal-description)
   (subgoals :initform nil :initarg :subgoals :accessor goal-subgoals)
   (status :initform "open" :initarg :status :accessor goal-status)
   (priority :initform :initarg :priority :accessor goal-priority)))

(defun drop-all-goals ()
  (setf last-id -1)
  (clrhash goals))

(defun add-goal (title &optional append-to)
  "For now very naive version of ADD-GOAL."
  (let ((goal (make-instance 'goal :title title)))
    (setf (gethash (goal-id goal) goals) goal)
    (if append-to
	(push goal (goal-subgoals (gethash append-to goals))))
    (goal-id goal)))

(defparameter indent 0)

(defun display-goal (goal)
  (format nil "~a* ~a~a~%~{~a~}"
	  (make-string indent :initial-element #\space)
	  (if (not (equal (goal-status goal) "open"))
	      #?"($((goal-status goal))) "
	      "")
	  (goal-title goal)
	  (let ((indent (+ indent 2)))
	    (mapcar #'display-goal (reverse (goal-subgoals goal))))))
	      

#+nil
(progn
  (let ((master-id (add-goal "Сделать дело")))
    (add-goal "Сделать раз" master-id)
    (add-goal "Сделать два" master-id)
    (add-goal "Сделать три" master-id)))

